Giving a robot a new assignment just after finishing the one it was doing can result to task dependency mismatch, resource congestion and priority conflicts. For example, cases of concurrent access may bring inefficiency or deadlock if the new task needs the same resources as the previous one. On the other hand, assigning tasks without giving priority would lead to sub-optimal use of resources while ignoring their dependencies could lead to poor execution. It might thus be necessary to develop a task-scheduling systems encompassing some or all of the following: allocation methods that apply based on dependence and priority, effective management of resources, notification at task completion for efficient scheduling and preventing any kind of clash between tasks leading them being done with utmost speed and prevision. 